{"version":3,"file":"03-feedback-8c525841.js","sources":["../../src/js/page-1/03-feedback.js"],"sourcesContent":["// /*\n// Заповнення полів форми з Local Storage\n// */\n\n// Отримуємо елемент форми з класом 'js-feedback-form' і зберігаємо його у змінну feedbackFormEl.\nconst feedbackFormEl = document.querySelector('.js-feedback-form');\n\n// Ініціалізуємо порожній об'єкт formData для збереження даних форми.\nconst formData = {};\n\n// Функція для заповнення полів форми значеннями з локального сховища (localStorage).\nconst fillFormFields = form => {\n  // Отримуємо дані з localStorage, які збережені під ключем 'feedback-form-data', і парсимо їх з JSON у об'єкт.\n  const formDataFromLS = JSON.parse(localStorage.getItem('feedback-form-data'));\n\n  // Якщо дані з localStorage відсутні, функція завершить роботу (нічого не буде заповнювати).\n  if (formDataFromLS === null) {\n    return;\n  }\n\n  // Перебираємо кожен ключ у збережених даних з localStorage.\n  for (const key in formDataFromLS) {\n    // Перевіряємо, чи даний ключ є власним властивістю об'єкта (виключаємо успадковані властивості).\n    if (formDataFromLS.hasOwnProperty(key)) {\n      // Заповнюємо відповідне поле форми значенням із збережених даних.\n      form.elements[key].value = formDataFromLS[key];\n    }\n  }\n};\n\n// Викликаємо функцію для заповнення полів форми значеннями з localStorage при завантаженні сторінки.\nfillFormFields(feedbackFormEl);\n\n// Функція для обробки змін у полях форми.\nconst onFormFieldChange = event => {\n  // Отримуємо ім'я поля, яке було змінено.\n  const fieldName = event.target.name;\n  // Отримуємо нове значення цього поля.\n  const fieldValue = event.target.value;\n\n  // Оновлюємо об'єкт formData новим значенням для відповідного поля.\n  formData[fieldName] = fieldValue;\n  // Зберігаємо оновлений об'єкт formData у localStorage у вигляді рядка JSON.\n  localStorage.setItem('feedback-form-data', JSON.stringify(formData));\n};\n\n// Функція для обробки події надсилання форми (submit).\nconst onFeedbackFormSubmit = event => {\n  // Зупиняємо стандартну поведінку форми (відправка даних і перезавантаження сторінки).\n  event.preventDefault();\n\n  // Очищаємо всі поля форми, повертаючи їх до початкового стану.\n  event.target.reset();\n\n  // Видаляємо збережені дані форми з локального сховища (localStorage).\n  localStorage.removeItem('feedback-form-data');\n};\n\n// Додаємо обробник події 'change' до форми, який викликає onFormFieldChange при зміні будь-якого поля форми.\nfeedbackFormEl.addEventListener('change', onFormFieldChange);\nfeedbackFormEl.addEventListener('submit', onFeedbackFormSubmit);\n\n// Недоліком способу є те, що при оновлені сторінки і оновлені даних оновлення даних яке призводить до перезапису даних в Local Storage\n"],"names":["feedbackFormEl","formData","fillFormFields","form","formDataFromLS","key","onFormFieldChange","event","fieldName","fieldValue","onFeedbackFormSubmit"],"mappings":"AAKA,MAAMA,EAAiB,SAAS,cAAc,mBAAmB,EAG3DC,EAAW,CAAA,EAGXC,EAAiBC,GAAQ,CAE7B,MAAMC,EAAiB,KAAK,MAAM,aAAa,QAAQ,oBAAoB,CAAC,EAG5E,GAAIA,IAAmB,KAKvB,UAAWC,KAAOD,EAEZA,EAAe,eAAeC,CAAG,IAEnCF,EAAK,SAASE,CAAG,EAAE,MAAQD,EAAeC,CAAG,EAGnD,EAGAH,EAAeF,CAAc,EAG7B,MAAMM,EAAoBC,GAAS,CAEjC,MAAMC,EAAYD,EAAM,OAAO,KAEzBE,EAAaF,EAAM,OAAO,MAGhCN,EAASO,CAAS,EAAIC,EAEtB,aAAa,QAAQ,qBAAsB,KAAK,UAAUR,CAAQ,CAAC,CACrE,EAGMS,EAAuBH,GAAS,CAEpCA,EAAM,eAAc,EAGpBA,EAAM,OAAO,QAGb,aAAa,WAAW,oBAAoB,CAC9C,EAGAP,EAAe,iBAAiB,SAAUM,CAAiB,EAC3DN,EAAe,iBAAiB,SAAUU,CAAoB"}